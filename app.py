import streamlit as st
import pandas as pd
import gspread
from oauth2client.service_account import ServiceAccountCredentials
from difflib import get_close_matches
import json
from PIL import Image
import matplotlib.pyplot as plt
import re
import base64
import os

# --- C·∫•u h√¨nh trang ---
st.set_page_config(page_title="Chatbot Ph·∫°m H·ªìng Long", layout="centered")

# --- Hi·ªÉn th·ªã logo ---
logo = Image.open("logo_hinh_tron.png")
st.image(logo, width=200)
st.markdown("""
<h1 style='text-align: center; color: orange;'>ü§ñ Chatbot PH·∫†M H·ªíNG LONG</h1>
<h4 style='text-align: center; color: gray;'>Tr·ª£ l√Ω h·ªèi ‚Äì ƒë√°p d·ªØ li·ªáu t·ª± ƒë·ªông</h4>
""", unsafe_allow_html=True)

# --- Gi·∫£i m√£ KEY b√≠ m·∫≠t an to√†n ---
try:
    key_json = st.secrets["gspread_secret"]
    key_decoded = base64.b64decode(key_json).decode("utf-8")
    key_dict = json.loads(key_decoded)

    scope = ["https://spreadsheets.google.com/feeds", "https://www.googleapis.com/auth/drive"]
    creds = ServiceAccountCredentials.from_json_keyfile_dict(key_dict, scope)
    client = gspread.authorize(creds)

    sheet = client.open_by_url("https://docs.google.com/spreadsheets/d/13MqQzvV3Mf9bLOAXwICXclYVQ-8WnvBDPAR8VJfOGJg")
    worksheet = sheet.worksheet("H·ªèi-Tr·∫£ l·ªùi")
    data = worksheet.get_all_records()
    df = pd.DataFrame(data)
except Exception as e:
    st.error(f"‚ùå L·ªói k·∫øt n·ªëi Google Sheets: {e}")
    st.stop()

# --- Hi·ªÉn th·ªã g·ª£i √Ω c√¢u h·ªèi ---
with open("sample_questions.json", "r", encoding="utf-8") as f:
    sample_questions = json.load(f)

with st.expander("üìå G·ª£i √Ω c√¢u h·ªèi m·∫´u"):
    for q in sample_questions:
        st.markdown(f"- {q}")

question = st.text_input("üí¨ Nh·∫≠p c√¢u h·ªèi c·ªßa b·∫°n")

# --- Tra l√£nh ƒë·∫°o x√£ ---
def handle_lanh_dao():
    try:
        if "l√£nh ƒë·∫°o" in question.lower() and any(xa in question.lower() for xa in ["ƒë·ªãnh h√≥a", "kim ph∆∞·ª£ng", "ph∆∞·ª£ng ti·∫øn", "trung h·ªôi", "b√¨nh y√™n", "ph√∫ ƒë√¨nh", "b√¨nh th√†nh", "lam v·ªπ"]):
            sheet_ld = sheet.worksheet("Danh s√°ch l√£nh ƒë·∫°o x√£, ph∆∞·ªùng")
            df_ld = pd.DataFrame(sheet_ld.get_all_records())

            xa_match = re.search(r'x√£|ph∆∞·ªùng ([\w\s]+)', question.lower())
            if xa_match:
                ten_xa = xa_match.group(1).strip().upper()
            else:
                for row in df_ld['Thu·ªôc x√£/ph∆∞·ªùng'].unique():
                    if row.lower() in question.lower():
                        ten_xa = row.upper()
                        break
                else:
                    st.warning("‚ùó Kh√¥ng x√°c ƒë·ªãnh ƒë∆∞·ª£c t√™n x√£/ph∆∞·ªùng trong c√¢u h·ªèi.")
                    return True

            df_loc = df_ld[df_ld['Thu·ªôc x√£/ph∆∞·ªùng'].str.upper().str.contains(ten_xa)]
            if df_loc.empty:
                st.warning(f"‚ùå Kh√¥ng t√¨m th·∫•y d·ªØ li·ªáu l√£nh ƒë·∫°o cho x√£/ph∆∞·ªùng: {ten_xa}")
            else:
                st.success(f"üìã Danh s√°ch l√£nh ƒë·∫°o x√£/ph∆∞·ªùng {ten_xa}")
                st.dataframe(df_loc.reset_index(drop=True))
            return True
    except Exception as e:
        st.error(f"L·ªói khi x·ª≠ l√Ω d·ªØ li·ªáu l√£nh ƒë·∫°o x√£: {e}")
    return False

# --- TBA theo ƒë∆∞·ªùng d√¢y ---
def handle_tba():
    if "tba" in question.lower() and "ƒë∆∞·ªùng d√¢y" in question.lower():
        try:
            sheet_tba = sheet.worksheet("T√™n c√°c TBA")
            df_tba = pd.DataFrame(sheet_tba.get_all_records())
            match = re.search(r'(\d{3}E6\.22)', question.upper())
            if match:
                dd = match.group(1)
                df_dd = df_tba[df_tba['STT ƒë∆∞·ªùng d√¢y'].astype(str).str.contains(dd)]
                if not df_dd.empty:
                    st.success(f"üìÑ Danh s√°ch TBA tr√™n ƒë∆∞·ªùng d√¢y {dd}")
                    st.dataframe(df_dd.reset_index(drop=True))
                else:
                    st.warning(f"‚ùå Kh√¥ng t√¨m th·∫•y TBA tr√™n ƒë∆∞·ªùng d√¢y {dd}")
                return True
        except Exception as e:
            st.error(f"L·ªói khi l·∫•y d·ªØ li·ªáu TBA: {e}")
            return True
    return False

# --- G·ªçi h√†m ---
if question:
    matches = get_close_matches(question, df['C√¢u h·ªèi'], n=1, cutoff=0.6)
    if matches:
        matched_question = matches[0]
        answer_row = df[df['C√¢u h·ªèi'] == matched_question].iloc[0]
        st.success(f"**Tr·∫£ l·ªùi:** {answer_row['C√¢u tr·∫£ l·ªùi']}")
    elif "l√£nh ƒë·∫°o" in question.lower():
        matched = handle_lanh_dao()
    elif "tba" in question.lower():
        matched = handle_tba()
    else:
        fallback_matches = get_close_matches(question, sample_questions, n=1, cutoff=0.6)
        if fallback_matches:
            st.info(f"‚ùî C√¢u h·ªèi g·∫ßn gi·ªëng: '{fallback_matches[0]}'\n\nHi·ªán t·∫°i c√¢u tr·∫£ l·ªùi ƒëang ƒë∆∞·ª£c c·∫≠p nh·∫≠t. Vui l√≤ng th·ª≠ l·∫°i sau ho·∫∑c li√™n h·ªá h·ªó tr·ª£.")
        else:
            st.warning("‚ùå Kh√¥ng t√¨m th·∫•y c√¢u tr·∫£ l·ªùi ph√π h·ª£p trong d·ªØ li·ªáu. H√£y th·ª≠ l·∫°i v·ªõi c√°ch di·ªÖn ƒë·∫°t kh√°c.")